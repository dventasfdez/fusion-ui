import fs from 'fs';
import path from 'path';

// read all files in the components directory
const files = fs.readdirSync(path.join(process.cwd(), 'src/components'));

const EXPORT_TYPES = {
  DEFAULT: /export default [\s\S]*?;/g,
  NAMED: /export \{[\s\S]*?\}/g,
  NAMED_AS: /export\s+const\s+(\S+)\s*=\s*(\S+)/g,
};

const extractExports = (content, type) => {
  if (type === EXPORT_TYPES.NAMED_AS) return EXPORT_TYPES.NAMED_AS.exec(content);
  const regex = new RegExp(type);
  const matches = content.match(regex);
  if (!matches) {
    return [];
  }
  return matches.map((match) => match.replace(`${type} `, ''));
};

const cleanExport = (content, type) => {
  if (type === EXPORT_TYPES.DEFAULT) {
    return content
      .replace(/export default /, '')
      .replace(/;/g, '')
      .trim();
  }
  if (type === EXPORT_TYPES.NAMED) {
    return content
      .replace(/export \{/g, '')
      .replace(/\}/g, '')
      .replace(/default as /g, '')
      .replace(/\n/g, '')
      .trim();
  }
  if (type === EXPORT_TYPES.NAMED_AS) {
    if (content && content.length) return content[1];
  }
  return;
};

// create an index.tsx file
let indexFile = files
  .filter((file) => file !== 'index.tsx')
  .map((file) => {
    const innerFiles = fs.readdirSync(path.join(process.cwd(), 'src/components', file));
    const innerIndexFile = innerFiles
      .filter((innerFile) => innerFile === file + '.tsx' && !innerFile.match(/\.test\.tsx$/))
      .map(() => {
        const exports = [];

        const content = fs.readFileSync(path.join(process.cwd(), 'src/components', file, file + '.tsx'), 'utf8');

        const defaultExport = extractExports(content, EXPORT_TYPES.DEFAULT);
        const namedExport = extractExports(content, EXPORT_TYPES.NAMED);
        const constExport = extractExports(content, EXPORT_TYPES.NAMED_AS);

        exports.push(cleanExport(...defaultExport, EXPORT_TYPES.DEFAULT));

        if (constExport && constExport.length) exports.push(cleanExport(constExport, EXPORT_TYPES.NAMED_AS));

        if (namedExport && namedExport.length)
          exports.push(...namedExport.map((exp) => cleanExport(exp, EXPORT_TYPES.NAMED)));

        return exports;
      });
    return `export {${innerIndexFile
      // eslint-disable-next-line eqeqeq
      .filter((inner) => inner != null)
      .map((inner) => `default as ${inner}`)
      .join(',')}} from './${file}/${file}';`;
  })
  .join('\n');

// add line to indexFile and jump line
indexFile = `// This file is auto-generated by scripts/indexComponents.mjs \n${indexFile}`;

indexFile += '\n\nimport \'../assets/styles/main.scss\';';

fs.writeFile(path.join(process.cwd(), 'src/components/index.tsx'), indexFile, (err) => {
  if (err) throw err;
});
